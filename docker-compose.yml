version: '3.8'
services:

  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # On utilise la syntaxe clé: valeur, qui est plus claire.
    # Docker Compose va lire les valeurs dans votre fichier .env et les substituer ici.
    environment:
      POSTGRES_DB: ${SQL_DATABASE}
      POSTGRES_USER: ${SQL_USER}
      POSTGRES_PASSWORD: ${SQL_PASSWORD}
    healthcheck:
      # La commande reste la même, mais maintenant les variables seront correctement définies.
      test: ["CMD-SHELL", "pg_isready -U ${SQL_USER} -d ${SQL_DATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # redis:
  #   image: redis:6
  redis:
    image: "redis:alpine"
    ports:
      - "6382:6379"
    volumes:
      - redis_data:/data

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    build: .
    # Ce service lance UNIQUEMENT les migrations et s'arrête ensuite.
    command: python manage.py migrate --noinput
    volumes:
      - .:/app
    env_file: .env
    depends_on:
      db:
        # Attend que la DB soit "healthy" (prête)
        condition: service_healthy


  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      - ./Trading_cookies.json:/app/Trading_cookies.json
      - ./app_trading_bot.log:/app/app_trading_bot.log
    ports:
      - "${WEB_PORT:-8000}:8000"
    depends_on:
      db:
        # Attend que la DB soit "healthy" (prête)
        condition: service_healthy
      migrate:
        # Attend que le service 'migrate' soit terminé avec succès
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/trading_bot
      - DJANGO_SETTINGS_MODULE=trading_bot.settings
      - REDIS_URL=redis://redis:6379

  celery_worker:
    build: .
    command: celery -A trading_bot worker -l info -c 1
    volumes:
      - .:/app
      - ./Trading_cookies.json:/app/Trading_cookies.json
      - ./app_trading_bot.log:/app/app_trading_bot.log
    depends_on:
      - redis
      - web
    environment:
      - DJANGO_SETTINGS_MODULE=trading_bot.settings
      # - SELENIUM_GRID_URL=http://selenium-hub:4444/wd/hub
      # - PYTHONPATH=/app

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:










# docker-compose.yml
# version: '3.8'

# services:
#   db:
#     image: postgres:13
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     environment:
#       # Utilise les variables du fichier .env pour plus de sécurité et de flexibilité
#       - POSTGRES_DB=${POSTGRES_DB}
#       - POSTGRES_USER=${POSTGRES_USER}
#       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#     # Le healthcheck s'assure que la DB est prête à accepter des connexions avant que les autres services ne démarrent
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
#       interval: 5s
#       timeout: 5s
#       retries: 5

#   redis:
#     image: "redis:alpine"
#     volumes:
#       - redis_data:/data
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 5s
#       timeout: 5s
#       retries: 5

#   # NOUVEAU SERVICE : dédié uniquement aux migrations
#   migrate:
#     build: .
#     # Ce service lance UNIQUEMENT les migrations et s'arrête ensuite.
#     command: python manage.py migrate --noinput
#     volumes:
#       - .:/app
#     env_file: .env
#     depends_on:
#       db:
#         # Attend que la DB soit "healthy" (prête)
#         condition: service_healthy

#   web:
#     build: .
#     # COMMANDE AMÉLIORÉE : Utilise Gunicorn (serveur de production) au lieu du serveur de dev
#     # command: gunicorn trading_bot.wsgi:application --bind 0.0.0.0:8000 --workers 3
#     command: python manage.py runserver 0.0.0.0:8000
#     volumes:
#       - .:/app
#       - static_volume:/app/staticfiles
#       - media_volume:/app/mediafiles
#       - ./Trading_cookies.json:/app/Trading_cookies.json
#       # ATTENTION: Monter un fichier de log est fragile. Il est préférable de logger sur la sortie standard (console).
#       # - ./app_trading_bot.log:/app/app_trading_bot.log
#     ports:
#       - "${WEB_PORT:-8000}:8000"
#     env_file: .env
#     depends_on:
#       migrate:
#         # Attend que le service 'migrate' soit terminé avec succès
#         condition: service_completed_successfully
#       redis:
#         condition: service_healthy

#   celery_worker:
#     build: .
#     # La commande reste la même, elle ne doit PAS migrer.
#     command: celery -A trading_bot worker -l info -c 1
#     volumes:
#       - .:/app
#       - ./Trading_cookies.json:/app/Trading_cookies.json
#       # - ./app_trading_bot.log:/app/app_trading_bot.log # Même remarque que pour le service web
#     env_file: .env
#     depends_on:
#       migrate:
#         # Attend également que les migrations soient terminées.
#         condition: service_completed_successfully
#       redis:
#         condition: service_healthy

# volumes:
#   postgres_data:
#   redis_data:
#   static_volume:
#   media_volume:




































# version: '3.8'

# services:
#   redis:
#     image: "redis:alpine"
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis_data:/data # Persistance pour Redis

#   web:
#     build: .
#     command: >
#       sh -c "python manage.py migrate && 
#              gunicorn trading_bot_project.wsgi:application --bind 0.0.0.0:8000 --workers 3 --threads 2 --timeout 120"
#     volumes:
#       - .:/app # Monte le code local pour le développement, enlève pour la prod
#       - static_volume:/app/staticfiles # Pour les fichiers statiques collectés
#       - media_volume:/app/mediafiles   # Pour les fichiers media
#       - ./Trading_cookies.json:/app/Trading_cookies.json # Monte le fichier de cookies
#       - ./app_trading_bot.log:/app/app_trading_bot.log # Monte le fichier de log
#     ports:
#       - "8000:8000"
#     depends_on:
#       - redis
#     environment:
#       - DJANGO_SETTINGS_MODULE=trading_bot_project.settings
#       # - SELENIUM_GRID_URL=http://selenium-hub:4444/wd/hub # Si tu utilises Selenium Grid

#   celery_worker:
#     build: .
#     command: celery -A trading_bot_project worker -l info -c 1 # -c 1 pour un seul bot à la fois
#     volumes:
#       - .:/app
#       - ./Trading_cookies.json:/app/Trading_cookies.json
#       - ./app_trading_bot.log:/app/app_trading_bot.log
#     depends_on:
#       - redis
#       - web # Attendre que la DB soit migrée (pas parfait, mais aide)
#     environment:
#       - DJANGO_SETTINGS_MODULE=trading_bot_project.settings
#       # - SELENIUM_GRID_URL=http://selenium-hub:4444/wd/hub

#   # Optionnel: Selenium Grid (si tu ne veux pas Chrome dans ton image Django)
#   # selenium-hub:
#   #   image: selenium/hub:latest
#   #   ports:
#   #     - "4442:4442"
#   #     - "4443:4443"
#   #     - "4444:4444"

#   # chrome-node: # Tu peux scaler ça
#   #   image: selenium/node-chrome:latest
#   #   shm_size: 2g
#   #   depends_on:
#   #     - selenium-hub
#   #   environment:
#   #     - SE_EVENT_BUS_HOST=selenium-hub
#   #     - SE_EVENT_BUS_PUBLISH_PORT=4442
#   #     - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
#   #     # - SCREEN_WIDTH=1920 # Optionnel
#   #     # - SCREEN_HEIGHT=1080

# volumes:
#   redis_data:
#   static_volume:
#   media_volume: